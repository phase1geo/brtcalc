#!/usr/bin/env python

##############################################################################################################
# Name:         brtcalc
# Author:       Trevor Williams  (phase1geo@gmail.com)
# Date:         6/28/2010
# Description:  Generates a bible-read through calendar (.ics) with the given start-date and chapters-per-day
#               input parameters.
##############################################################################################################

import sys
import datetime
import string
import uuid
import icalendar
from pytz import UTC

books = [ ['Genesis',         50,  2],
          ['Exodus',          40,  2],
          ['Leviticus',       27,  2],
          ['Numbers',         36,  2],
          ['Deuteronomy',     34,  2],
          ['Joshua',          24,  2],
          ['Judges',          21,  2],
          ['Ruth',            4,   2],
          ['1 Samuel',        31,  2],
          ['2 Samuel',        24,  2],
          ['1 Kings',         22,  2],
          ['2 Kings',         25,  2],
          ['1 Chronicles',    29,  2],
          ['2 Chronicles',    36,  2],
          ['Ezra',            10,  2],
          ['Nehemiah',        13,  2],
          ['Esther',          10,  2],
          ['Job',             42,  2],
          ['Psalms',          150, 2],
          ['Proverbs',        31,  2],
          ['Ecclesiastes',    12,  2],
          ['Song of Solomon', 8,   2],
          ['Isaiah',          66,  2],
          ['Jeremiah',        52,  2],
          ['Lamentations',    5,   2],
          ['Ezekiel',         48,  2],
          ['Daniel',          12,  2],
          ['Hosea',           14,  2],
          ['Joel',            3,   2],
          ['Amos',            9,   2],
          ['Obadiah',         1,   2],
          ['Jonah',           4,   2],
          ['Micah',           7,   2],
          ['Nahum',           3,   2],
          ['Habakkuk',        3,   2],
          ['Zephaniah',       3,   2],
          ['Haggai',          2,   2],
          ['Zechariah',       14,  2],
          ['Malachi',         4,   2],
          ['Matthew',         28,  2],
          ['Mark',            16,  2],
          ['Luke',            24,  2],
          ['John',            21,  2],
          ['Acts',            28,  2],
          ['Romans',          16,  2],
          ['1 Corinthians',   16,  2],
          ['2 Corinthians',   13,  2],
          ['Galatians',       6,   2],
          ['Ephesians',       6,   2],
          ['Philippians',     4,   2],
          ['Colossians',      4,   2],
          ['1 Thessalonians', 5,   2],
          ['2 Thessalonians', 3,   2],
          ['1 Timothy',       6,   2],
          ['2 Timothy',       4,   2],
          ['Titus',           3,   2],
          ['Philemon',        1,   2],
          ['Hebrews',         13,  2],
          ['James',           5,   2],
          ['1 Peter',         5,   2],
          ['2 Peter',         3,   2],
          ['1 John',          5,   2],
          ['2 John',          1,   2],
          ['3 John',          1,   2],
          ['Jude',            1,   2],
          ['Revelation',      22,  2],
          ['END',             0,   2] ]

start_book    = 0
start_chapter = 0 
start_date    = datetime.date.today()
uniquifier    = 0

#################################################################
# Outputs usage information and exits
#################################################################
def usage():
  print "Usage:  brtcalc [--start-date <start_date>] [--start-chapter <book>:<chapter>] [--cpd [<book>=]<chapters_per_day>]"
  print "  --start-date <start_date>          Specifies the date to start the read-through planner"
  print "  --start-chapter <book>:<chapter>   Specifies the book and chapter to start the read-through planner (default is Genesis:1)"
  print "  --cpd [<book>=]<chapters_per_day>  Specifies the number of chapters to read per day (default is 2).  If <book>=<chapters_per_day>"
  print "                                     is specified, the planner will schedule for the provided chapter number when reading the"
  print "                                     given book.  For example, if --cpd Psalms=5 is specified, the planner will schedule for"
  print "                                     2 chapters to be read in every book but when Psalms are read, 5 chapters will be scheduled."
  print "                                     More than one --cpd option may be specified.  They are used in the order given."
  quit()

#################################################################
# Looks up the index of the given book
#################################################################
def lookup_book(book):
  index = 0
  while (index < len(books)) and (books[index][0] != book):
    index = index + 1
  return index

#################################################################
# Parse command-line arguments
#################################################################
def parse_args(args):
  global start_date, start_book, start_chapter
  i = 0
  while( i < len(args) ):
    arg = args[i]
    if arg == '--start-date':
      i = i + 1
      if i == len(args):
        usage()
      user_date  = args[i].split('/')
      start_date = datetime.date( string.atoi(user_date[2]), string.atoi(user_date[0]), string.atoi(user_date[1]) )
    elif arg == '--start-chapter':
      i = i + 1
      if i == len(args):
        usage()
      start         = args[i].split(':')
      start_chapter = string.atoi(start[1]) - 1
      print "start_chapter %d" % start_chapter
      start_book    = lookup_book( start[0] )
      if start_book == len(books):
        raise ValueError, 'Specified --start-chapter book reference is not a valid book name'
      if (start_chapter < 0) or (start_chapter >= books[start_book][1]):
        raise ValueError, 'Specified --start-chapter chapter that is not valid for the given book'
    elif arg == '--cpd':
      i = i + 1
      if i == len(args):
        usage()
      cpd = args[i].split('=')
      if len(cpd) > 2:
        raise ValueError, "Specified --cpd contained more than one '=' sign"
      elif len(cpd) == 2:
        book     = lookup_book( cpd[0] )
        chapters = string.atoi( cpd[1] )
        if book == len(books):
          raise ValueError, 'Specified --cpd book reference is not a valid book name'
        if chapters <= 0:
          raise ValueError, 'Specified --cpd with zero or fewer chapters per day value'
        books[book][2] = chapters
      else:
        chapters = string.atoi( args[i] )
        if chapters <= 0:
          raise ValueError, 'Specified --cpd with zero or fewer chapters per day value'
        for book in books:
          book[2] = chapters
    else:
      usage()
    i = i + 1

#################################################################
# Outputs an entry for a single day.
#################################################################
def output_day(cal, day, timestamp, start_book, start_chapter, end_book, end_chapter):
  global uniquifier
  one_day = datetime.timedelta(days=1)
  today   = icalendar.vDate(day)
  today.params['VALUE'] = 'DATE'
  tomorrow = day + one_day
  if start_book == end_book:
    if start_chapter == end_chapter:
      ref_str = start_book + ":%d" % start_chapter
    else:
      ref_str = start_book + ":%d-%d" % (start_chapter, end_chapter)
  else:
    ref_str = start_book + (":%d-" % start_chapter) + end_book + (":%d" % end_chapter)
  uuid_str   = str( uuid.uuid3( uuid.NAMESPACE_DNS, "brtcalc%d" % uniquifier ) )
  uniquifier = uniquifier + 1
  event = icalendar.Event()
  event.add('summary', 'BRT - ' + ref_str)
  event['dtstart'] = today
  event.add('dtstamp', timestamp )
  event['uid'] = uuid_str
  cal.add_component(event)
  return tomorrow

#################################################################
# Get the next n chapters.
#################################################################
def get_nth_book_chapter(curr_book, curr_chapter, adv_one = 0):
  i         = 0
  last_book = curr_book
  while ((adv_one == 0) and ((i < (books[last_book][2] - 1)) or (i < (books[last_book][2] - 1)))) or ((adv_one == 1) and (i < adv_one)):
    if (curr_chapter + 1) == books[curr_book][1]:
      if books[curr_book + 1][0] == 'END': break
      last_book    = curr_book
      curr_book    = curr_book + 1
      curr_chapter = 0
    else:
      curr_chapter = curr_chapter + 1
    i = i + 1
  return curr_book, curr_chapter, i

#################################################################
# Generate the icalendar
#################################################################
def generate_ical():
  global start_book, start_chapter
  print "Generating brt_cal.ics ...  ",
  cal = icalendar.Calendar()
  cal.add('prodid', '-//BRT calendar//mxm.dk//')
  cal.add('version', '2.0')
  cal.add('x-wr-calname', 'Bible Read-Through Plan')
  timestamp   = datetime.datetime.now(UTC)
  num         = 1
  end_book    = start_book
  end_chapter = start_chapter
  curr_day    = start_date
  while num > 0:
    end_book,   end_chapter,   num = get_nth_book_chapter( start_book, start_chapter )
    curr_day = output_day( cal, curr_day, timestamp, books[start_book][0], (start_chapter + 1), books[end_book][0], (end_chapter + 1) )
    start_book, start_chapter, num = get_nth_book_chapter( end_book, end_chapter, 1 )
  output = open( 'brt_cal.ics', 'w' )
  output.write( cal.to_ical() )
  output.close()
  print "Done!"

if __name__ == "__main__":
  parse_args( sys.argv[1:] )
  generate_ical()
